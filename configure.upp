# configure.upp
#
# This file was automatically generated by the configure script in the
# top level directory. You may make changes to the settings in this
# file but be aware they will be overwritten each time you run configure.
# Ordinarily, it is necessary to run configure once, when the code is
# first installed.
#
# To permanently change options, change the settings for your platform
# in the file arch/configure.defaults then rerun configure.
#

SHELL           	=       /bin/sh

LDFLAGS_MPI             =     # to be overridden later

#### Architecture specific settings ####


WRF_LIB_EXTRA = -L$(WRF_DIR)/external/RSL_LITE -lrsl_lite

# Settings for Linux x86_64, gfortran compiler  (dmpar)#
FORMAT_FREE = -ffree-form -ffree-line-length-none

SFC     = gfortran
SF90    = gfortran $(FORMAT_FREE)
SCC     = gcc

DM_FC    = mpif90 
DM_F90   = mpif90 $(FORMAT_FREE)
DM_CC    = mpicc 

FC      = $(DM_FC)
F90     = $(DM_F90)
CC      = $(DM_CC)
CPP     = /lib/cpp

LINUX_OBJ  = TIMEF.o
BYTE_ORDER = UPPLITTLEENDIAN
SIZE_I8R8  = -fdefault-integer-8 -fdefault-real-8
SIZE_I4R8  = -fdefault-real-8
SIZE_I4R4  = 
SIZE       =

PPDEFINE   = -DCOMMCODE -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -g -O0 -ffpe-trap=overflow,zero -fbounds-check -Wuninitialized \
          -ftrapv  -Wall
CRTMDBUG=
CDEBUG  = -g -O0 -Wall

FOPT    = -O3
CRTMOPT =
COPT    = -O3

CPP_FLAGS = -P -traditional-cpp $(FPPDEFINE)
INC_FLAGS =
LDFLAGS   = -Wl,-noinhibit-exec
FFLAGS    = -fconvert=big-endian -fno-second-underscore -frecord-marker=4 \
            $(FPPDEFINE) $(SIZE) -fno-range-check $(FOPT)
CFLAGS    = $(PPDEFINE) -D_OPENMP $(COPT)
ARFLAGS   =

FFLAGS_CRTM = -c -fconvert=big-endian -fno-second-underscore -frecord-marker=4 \
              -ggdb -static $(SIZE) $(FOPT)
FL_CRTM     =

###########################################################
#
#	Macros, these should be generic for all machines
LN		=   ln -sf
MAKE  =   make
RM		=   /bin/rm -f
CP		=   /bin/cp
MV              =   /bin/mv
AR		=   ar ru

WRF_DIR         =    /scratch/ywang/MPAS/gnu/UPP_KATE_kjet/../WRFV4.0
WRF_LIB2        =    
NETCDFPATH      =    /scratch/ywang/tools/gnu
NETCDFLIBS      =    -lnetcdff -lnetcdf -lhdf5_hl -lhdf5 -lm -lz -ldl -lbz2 -lzstd -lcurl -lstdc++  -L/scratch/ywang/tools/pnetcdf-1.12.3/lib -lpnetcdf

COMMS_ADD_OBJ   =    
COMMS_ADD_OBJST =    
COMMS_LIB       =    

SERIAL_MPI_STUB =    
SERIAL_MPI_LIB  =    

GRIB2SUPT_LIB   =    -L/scratch/ywang/tools/gnu/lib64 -ljasper -L/scratch/ywang/tools/gnu/lib -lpng -lz
GRIB2SUPT_INC   =    -I/scratch/ywang/tools/gnu/include

BINDIR          =    /scratch/ywang/MPAS/gnu/UPP_KATE_kjet/bin
INCMOD          =    /scratch/ywang/MPAS/gnu/UPP_KATE_kjet/include
LIBDIR          =    /scratch/ywang/MPAS/gnu/UPP_KATE_kjet/lib

WRF_INCLUDE     = -I$(WRF_DIR)/frame

WRF_LIB         = -L$(WRF_DIR)/main  -lwrflib \
                  -L$(WRF_DIR)/external/io_int -lwrfio_int \
                  -L$(WRF_DIR)/external/io_netcdf -lwrfio_nf \
                  -L$(WRF_DIR)/external/io_pnetcdf -lwrfio_pnf \
                  -L$(WRF_DIR)/external/io_grib1 -lio_grib1 \
                  -L$(WRF_DIR)/external/io_grib_share -lio_grib_share \
                  -L$(WRF_DIR)/external/esmf_time_f90 -lesmf_time \
                  -L$(WRF_DIR)/external/fftpack/fftpack5 -lfftpack

WRF_MODS        = $(WRF_DIR)/frame/module_internal_header_util.o \
                  $(WRF_DIR)/frame/pack_utils.o \
                  $(WRF_DIR)/frame/module_machine.o \
		  $(WRF_DIR)/frame/module_wrf_error.o \
		  $(WRF_DIR)/frame/wrf_debug.o

#
# These files may be changed to enable other files with the same 
# functions definitions, but different logic.  This is typically
# how backward compatibilty is achieved for the community code.
INITPOST_NMM_BIN_MPIIO = INITPOST_NMM_BIN_MPIIO_IJK.f
GRIBIT = GRIBIT.f
CALRAD = CALRAD_WCLOUD_crtm.f

# There is probably no reason to modify these rules
.SUFFIXES : .c .f .f90
.c.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS)  $<

.f.o:
	$(FC) $(FFLAGS) $(EXTRA_FFLAGS) $<

.f90.o :
	$(F90) $(FFLAGS) $(EXTRA_FFLAGS) $<

.F.o:
	$(CPP) $(CPP_FLAGS) $< > $*.f
	$(FC) $(FFLAGS) $(EXTRA_FFLAGS) $<

.F90.o:
	$(CPP) $(CPP_FLAGS) $< > $*.f90
	$(F90) $(FFLAGS) $(EXTRA_FFLAGS) $<
